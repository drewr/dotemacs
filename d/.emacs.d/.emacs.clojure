; -*- emacs-lisp -*-
(add-to-list 'load-path (expand-file-name "~/elisp/slime"))
(add-to-list 'load-path (expand-file-name "~/elisp/slime/contrib"))
(require 'slime)
(slime-setup '(slime-repl))

(add-to-list 'load-path (expand-file-name "~/elisp/clojure-mode"))
(add-to-list 'load-path (expand-file-name "~/elisp/swank-clojure"))
(require 'clojure-mode)
(add-hook 'clojure-mode-hook 'aar/lispy-parens)
(load "swank-clojure")
(setq slime-net-coding-system 'utf-8-unix)
(setq auto-mode-alist
      (cons '("\\.clj$" . clojure-mode)
            auto-mode-alist))
(setq swank-clojure-binary (expand-file-name "~/bin/clojure"))

(defun classpathize (paths)
  (mapconcat 'expand-file-name paths ":"))

(defun make-jar-path (x)
  (let ((path (expand-file-name (concat "~/tmp/src/jar-" x))))
    (concat "JAR_HOME=" path)))

(defmacro add-clojure-project (project path)
  (let* ((fullpath (expand-file-name path))
         (classpaths (mapcar
                      (lambda (p)
                        (concat fullpath p))
                      '("/lib/*"
                        "/src/clj")))
         (clj (expand-file-name "~/bin/clojure")))
    `(add-to-list 'slime-lisp-implementations
                  (backquote
                   (,project
                    ("env"
                     ,(concat "CLASSPATH=" (classpathize classpaths))
                     ,clj)
                    :init swank-clojure-init)) t)))

(progn
  (setq slime-lisp-implementations '())
  (add-clojure-project fleetdb "~/src/fleetdb")
  (add-clojure-project dispatchr "~/src/dispatchr")
  (add-clojure-project missive "~/src/nmd/missive")
  (add-to-list 'slime-lisp-implementations
               `(hbase
                 ("env"
                  ,(concat "CLASSPATH=" (classpathize '("~/src/nmd/query/clojure/src/clj"
                                                        "~/elisp/swank-clojure/src")))
                  ,(make-jar-path "hbase")
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(telephus
                 ("env"
                  ,(concat "CLASSPATH=" (classpathize '("~/elisp/swank-clojure/src"
                                                        "~/src/telephus/src/clj"
                                                        "~/src/nmd/missive/src/clj"
                                                        "~/src/nmd/missive/lib/clojure-json-20090430b.jar"
                                                        "~/src/nmd/missive/lib/clojure-1.1.0-alpha-SNAPSHOT.jar"
                                                        "~/src/nmd/missive/lib/clojure-contrib-20090831113321+39618b6.jar"
                                                        "~/tmp/src/cassandra/build/classes"
                                                        "~/tmp/src/cassandra/lib/*"
                                                        "~/tmp/src/hbase/build/*")))
                  ,(concat "PROPS=" "-Dstorage-config=/Users/aar/tmp/src/cassandra/conf")
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(spready
                 ("env"
                  ,(concat "CLASSPATH="
                           (classpathize '("~/elisp/swank-clojure/src"
                                           "~/src/spready/lib/*"
                                           "~/src/spready/src/clj")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(scour
                 ("env"
                  ,(concat "CLASSPATH="
                           (classpathize '("~/elisp/swank-clojure/src"
                                           "~/src/nmd/scour/lib/*")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(floyd
                 ("env"
                  ,(concat "CLASSPATH="
                           (classpathize '("~/elisp/swank-clojure/src"
                                           "~/src/nmd/floyd/lib/*"
                                           "~/src/nmd/floyd/src"
                                           "~/src/nmd/floyd/test")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(cljdev
                 ("env"
                  ,(concat "CLASSPATH=" (classpathize '("~/elisp/swank-clojure/src"
                                                        "~/tmp/src/clojure/classes"
                                                        "~/tmp/src/clojure/src/clj"
                                                        "~/tmp/src/clojure-contrib/src")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(clot
                 ("env"
                  ,(concat "CLASSPATH=" (classpathize '("~/elisp/swank-clojure/src"
                                                        "~/src/clot/src"
                                                        "~/src/clot/lib/*")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(incanter
                 ("env"
                  ,(concat "CLASSPATH="
                           (classpathize '("~/elisp/swank-clojure/src"
                                           "~/tmp/src/incanter/incanter.jar"
                                           "~/tmp/src/incanter/src"
                                           "~/tmp/src/incanter/lib/*"
                                           "~/tmp/src/incanter/lib/processing/*")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t)

  (add-to-list 'slime-lisp-implementations
               `(enlive
                 ("env"
                  ,(concat "CLASSPATH="
                           (classpathize '("~/elisp/swank-clojure/src"
                                           "~/tmp/src/clojure/clojure-1.1.0-alpha-SNAPSHOT-20090929232127+1ca9c8b.jar"
                                           "~/tmp/src/enlive/enlive.jar"
                                           "~/tmp/src/enlive/lib/*")))
                  ,(expand-file-name "~/bin/clojure"))
                 :init swank-clojure-init) t))
